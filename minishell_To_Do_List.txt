

minishell :

		 ** detection du ; != bash									// pwd quelque;chose												// no problem behaving exactly like bash

		 ** command not found != bash								// cmd sans le dernier path											//Done

		 ** "echo"													// devrait tester echo

		 ** cat <<<eof												// syntax error ?



exit	:
		
		 ** Lors de l'exit != bash => "exit\n"																							//Done

		 ** double exit printed when using exit command																					//Done

		 ** exit1 ne retourne pas le code 1 	------> ./minishell dans minishell puis exit 1 echo $? n'a pas la bonne valeur			//Done
		 										------> ./minishell puis exit 1 on recupere bien la bonne valeur


export : 
		
		 ** += devrait faire une concatenation																							//Done
		
		 ** verrifier la norme des noms de variables => {+; 0; ...} ne devrai pas etre autorise											//Done
		
		 ** export sans args liste env																									//Done
		
		 ** export t = 3 != bash																										//Done
		
		 ** export | grep quelque chose != bash 					// n'affiche pas une variable qui n'as pas de valeur				//Done

		 ** export -var=3 											// != bash '-' interdit																									

env 	:
		
		 ** quelque chose != bash																										//Done


cd 		:
		
		 ** export test=123 | cd objs 								// action

		 ** perte de env suite a cd ..																									//Done
		
		 ** $PWD et $OLDPWD pas a jour suite a cd .. 																					//Done

		 ** cd .. apres supression du fichier parent				// ne devrait pas etre autorise										//Done
		 
		 ** cd testtest  apres creation et chmod 000				// != bash message erreur


heredoc	:

		 ** >>t														// segfault															//Done
		 ** <<t														// segfault															//Done
		 ** Ctrl + c != bash										// doit quitter leheredoc											//Done
		 ** interpreter $ pour les variables																							//Done
segfault

		 ** export PATH= ensuite une commande -> segfault																				//Done


															//	TEST MINISHELL MAP	\\

															
								[ CARACTERES A LA VOLEE ]

	[cmd]								[msg bash \n $>]											[code attendu]			[observation]

	<									bash: syntax error near												2					code error / err msg
	>									unexpected token `newline'											2					code error / err msg
	<<												==														2					code error / err msg
	>>												==														2					code error / err msg
	<>												==														2					code error / err msg
	>>>>>											== token `>>'											2					code error
	<<<<<											== token `<<'											2					code error
	>>>>>>>>>>>>>>>									== token `>>'											2					code error
	<<<<<<<<<<<<<<<									== token `<<'											2					code error / err msg
	> > > > 										== token `>'											2					code error
	< < < < 										== token `<'											2					code error
	>> >> >> >> 									== token `>>'											2					code error
	<< << << << 									== token `<<'											2					code error
	>>>> >> >> >> 									== token `>>'											2					code error
	<<<< << << << 									== token `<<'											2					code error / err msg
	
	/			 						bash: /: Is a directory												126					code error / err msg / action
	//			 						bash: /: Is a directory												126					code error / err msg / action
	/.			 						bash: /: Is a directory												126					code error / err msg / action
	/./../../../../..					bash: /: Is a directory												126					code error / err msg / action
	///////								bash: /: Is a directory												126					code error / err msg / action
	
	-									bash: -: command not found											127					code error / err msg / action
	_									bash: _: command not found											127					code error / err msg / action
	@									bash: @: command not found											127					code error / err msg / action
	?									bash: ?: command not found											127					code error / err msg / action
	&									bash: &: command not found											127					code error / err msg / action
	(									bash: (: command not found											127					code error / err msg / action
	)									bash: ): command not found											127					code error / err msg / action
	
	|									bash: syntax error near unexpected token `|'						2					code error / err msg 
	| hola								bash: syntax error near unexpected token `|'						2					code error / err msg 
	| | |								bash: syntax error near unexpected token `|'						2					code error / err msg 
	||									bash: syntax error near unexpected token `|'						2					code error
	|||||								bash: syntax error near unexpected token `|'						2					code error
	|||||||||||							bash: syntax error near unexpected token `|'						2					code error
	>>|><								bash: syntax error near unexpected token `|'						2					code error / err msg 
	
	&&									bash: syntax error near unexpected token `&&'						2					code error
	&&&&&								bash: syntax error near unexpected token `&&'						2					code error
	&&&&&&&&&&&&&&						bash: syntax error near unexpected token `&&'						2					code error
	
								[ ECHO ]

	echo $:$= | cat -e					$:$=$																0					msg
	echo my terminal is [$TERM]																				0					msg
	echo my terminal is [$TERM4]																			0					msg
	echo $hola*																								0					msg
	echo > < 							bash: syntax error near	unexpected token `<'						2					code error / err msg
	echo >< 							bash: syntax error near	unexpected token `<'						2					code error / err msg
	echo | | 							bash: syntax error near	unexpected token `|'						2					code error / err msg
	>echo>	 							bash: syntax error near	unexpected token `newline'					2					code error / err msg
	<echo<	 							bash: syntax error near	unexpected token `newline'					2					code error / err msg
	>>echo>> 							bash: syntax error near	unexpected token `newline'					2					code error / err msg
	|echo|	 							bash: syntax error near	unexpected token `|'						2					code error / err msg
	|echo -n hola						bash: syntax error near	unexpected token `|'						2					code error / err msg
	echo $""																								2					msg
	echo $"HOME"																							2					msg
	echo $""HOME																							2					msg
	echo $"HO""ME"																							2					msg
	echo $=HOME																								2					msg
	echo $"HOLA"																							2					msg

								[ $ ]
	$HOME								bash: /mnt/nfs/homes/juchene: Is a directory						126					code error / err msg / action
								[ $ ]



	[cmd]								[msg bash \n $>]											[code attendu]			[observation]
	



												[ COMMANDES A TESTER ]

								[ CARACTERES A LA VOLEE ]

	:
	!
	>
	<
	>>
	<<
	<>
	><
	>>>>>
	>>>>>>>>>>>>>>>
	<<<<<
	<<<<<<<<<<<<<<<
	> > > >
	< < < <
	>> >> >> >>
	<< << << <<
	>>>> >> >> >>
	<<<< << << <<

	/
	//
	/.
	/./../../../../..
	///////
	\\
	\\\\
	\\\\\\\\

	-
	_
	@
	°
	]
	=
	+
	£
	?
	&
	(
	)

	|
	| hola
	| | |
	||
	|||||
	||||||||||
	>>|><
	&&
	&&&&&
	&&&&&&&&&&&&&&&

	"hola"
	'hola'
	hola
	hola que tal
	Makefile

								[ ECHO ]

	echo
	echo -n
	echo Hola
	echoHola
	echo-nHola
	echo"-n"Hola
	echo -nHola
	echo Hola -n
	echo Hola Que Tal
	echo	Hola
	echo	Hola	Que		Tal
	echo	\n Hola
	echo "         " | cat -e
	echo           | cat -e
	""''echo hola""'''' que""'' tal""''
	echo -n -n
	echo -n -n Hola Que 
	echo -p
	echo -nnnnn
	echo -n -nnn -nnnnn
	echo -n-nnn -nnnnn
	echo -n -nnn hola -nnnnn
	echo -n -nnn-nnnnn
	echo --------n
	echo -nnn --------n
	echo -nnn -----nn---nnnn
	echo -nnn --------nnnn
	echo $?
	echo $
	echo $?$
	echo $? | echo $? | echo $?
	echo $:$= | cat -e
	echo " $ " | cat -e
	echo ' $ ' | cat -e
	echo $HOME
	echo \$HOME
	echo my terminal is [$TERM]
	echo my terminal is [$TERM4
	echo $UID
	echo $HOME9
	echo $9HOME
	echo $HOME%
	echo $UID$HOME
	echo Le path de mon HOME est $HOME
	echo $USER$var\$USER$USER\$USERtest$USER
	echo $hola*
	echo -nnnn $hola
	echo > <
	echo ><
	echo | |
	EechoE
	.echo.
	>echo>
	<echo<
	>>echo>>
	|echo|
	|echo -n hola
	echo $""
	echo "$"""
	echo '$'''
	echo $"HOME"
	echo $''HOME
	echo $""HOME
	echo "$HO"ME
	echo '$HO'ME
	echo "$HO""ME"
	echo '$HO''ME'
	echo "'$HO''ME'"
	echo ""$HOME
	echo "" $HOME
	echo ''$HOME
	echo '' $HOME
	echo $"HO""ME"
	echo $'HOME'
	echo "$"HOME
	echo $=HOME
	echo $"HOLA"
	echo $'HOLA'
	echo $DONTEXIST Hola
	echo "hola"
	echo 'hola'
	echo ''hola''
	echo ''h'o'la''
	echo "''h'o'la''"
	echo "'"h'o'la"'"
	echo"'hola'"
	echo "'hola'"
	echo '"hola"'
	echo '''ho"''''l"a'''
	echo hola""""""""""""
	echo hola"''''''''''"
	echo hola''''''''''''
	echo hola'""""""""""'
	e"cho hola"
	e'cho hola'
	echo "hola     " | cat -e
	echo ""hola
	echo "" hola
	echo ""             hola
	echo ""hola
	echo "" hola
	echo hola""bonjour
	"e"'c'ho 'b'"o"nj"o"'u'r
	""e"'c'ho 'b'"o"nj"o"'u'r"
	echo "$DONTEXIST"Makefile
	echo "$DONTEXIST""Makefile"
	echo "$DONTEXIST" "Makefile"

								[ $ ]

	$?
	$?$?
	?$HOME
	$
	$HOME

								[ $ ]